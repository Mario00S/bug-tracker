pipeline {
    agent any
    tools { 
        go '1.19'
        nodejs 'NodeJS 24'
    }
    
    stages {
        /*  
        stage('Execute Unit Tests') {
            parallel {  // fixed spelling here
                stage('Unit Tests - Backend') {
                    steps {
                        dir('bugtracker-backend') {
                            sh 'go env GOPATH'
                            sh 'ls -l $(go env GOPATH)/bin'

                            sh '''
                                export PATH=$PATH:$(go env GOPATH)/bin
                                go install github.com/jstemmer/go-junit-report/v2@latest
                                go version
                                go test -v ./... 2>&1 | go-junit-report > test-results.xml

                                go test -coverprofile=coverage.out -covermode=atomic ./...
                                go tool cover -html coverage.out -o coverage.html

                                mkdir -p reports
                                mv coverage.html reports/
                            '''
                        }
                    }
                    post {
                        always {
                            junit 'bugtracker-backend/test-results.xml'
                            publishHTML target: [
                                reportDir: 'bugtracker-backend/reports',
                                reportFiles: 'coverage.html',
                                reportName: 'Backend Coverage Report'
                            ]
                        }
                    }
                }
                stage('Build and Test Frontend') {
                    steps {
                        dir('bugtracker-frontend') {
                            sh '''
                                npm --version
                                npm install
                                npm test 
                                mkdir -p reports
                                mv coverage reports/
                            '''
                        }
                    }
                    post {
                        always {
                            junit 'bugtracker-frontend/test-results.xml'   
                            publishHTML target: [
                                reportDir: 'bugtracker-frontend/reports/coverage',
                                reportFiles: 'index.html',
                                reportName: 'Frontend Coverage Report'
                            ]
                        }
                    }
                }
            }
        }
        */
        stage('Launc Application') {
            agent {
                docker {
                    image 'docker:27.5.1'
                    reuseNode true
                    args '-v /var/run/docker.sock:/var/run/docker.sock -u 0'
                }
            }
            steps {
                sh 'docker compose up --build -d'
            }
        }

        stage('Api Tests') {
                        agent {
                docker {
                    image 'mcr.microsoft.com/playwright:v1.50.0-jammy'
                    reuseNode true
                    args '-u 0 --network=host'
                }
            }
            steps {
                dir('tests-api')    {
                  sh 'npx wait-port http://localhost:8080/api/health -t 30000'  
                  sh 'npm ci'
                  sh 'npx playwright test'
                }
            }
            post {
                always {
                junit 'tests-api/test-results/results.xml'
                publishHTML target: [
                    reportDir: 'tests-api/playwright-report',
                    reportFiles: 'index.html',
                    reportName: 'Playwright API Test Report'
                ]
                }

            }   
        }

        stage('E2E Tests')
        docker {
            image 'mcr.microsoft.com/playwright:v1.50.0-jammy'
            reuseNode true
            args '-u 0 --network=host'
        }
        steps {
            dir('tests-e2e')    {
              sh 'npm ci'
              sh 'npx playwright test'
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
